// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: code.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Code: SwiftProtobuf.Message {
  static let protoMessageName: String = "Code"

  var methods: [Method] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.methods)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.methods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.methods, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Method: SwiftProtobuf.Message {
  static let protoMessageName: String = "Method"

  var name: String = String()

  var instructions: [Instruction] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.instructions)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.instructions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instructions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Instruction: SwiftProtobuf.Message {
  static let protoMessageName: String = "Instruction"

  var type: Instruction.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var detail: OneOf_Detail? {
    get {return _storage._detail}
    set {_uniqueStorage()._detail = newValue}
  }

  var repeatTimesDo: Instruction.RepeatTimesDo {
    get {
      if case .repeatTimesDo(let v)? = _storage._detail {return v}
      return Instruction.RepeatTimesDo()
    }
    set {_uniqueStorage()._detail = .repeatTimesDo(newValue)}
  }

  var repeatConditionDo: Instruction.RepeatConditionDo {
    get {
      if case .repeatConditionDo(let v)? = _storage._detail {return v}
      return Instruction.RepeatConditionDo()
    }
    set {_uniqueStorage()._detail = .repeatConditionDo(newValue)}
  }

  var ifDo: Instruction.IfDo {
    get {
      if case .ifDo(let v)? = _storage._detail {return v}
      return Instruction.IfDo()
    }
    set {_uniqueStorage()._detail = .ifDo(newValue)}
  }

  var call: Instruction.Call {
    get {
      if case .call(let v)? = _storage._detail {return v}
      return Instruction.Call()
    }
    set {_uniqueStorage()._detail = .call(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Detail: Equatable {
    case repeatTimesDo(Instruction.RepeatTimesDo)
    case repeatConditionDo(Instruction.RepeatConditionDo)
    case ifDo(Instruction.IfDo)
    case call(Instruction.Call)

    static func ==(lhs: Instruction.OneOf_Detail, rhs: Instruction.OneOf_Detail) -> Bool {
      switch (lhs, rhs) {
      case (.repeatTimesDo(let l), .repeatTimesDo(let r)): return l == r
      case (.repeatConditionDo(let l), .repeatConditionDo(let r)): return l == r
      case (.ifDo(let l), .ifDo(let r)): return l == r
      case (.call(let l), .call(let r)): return l == r
      default: return false
      }
    }
  }

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case moveForwards // = 0
    case turnLeft // = 1
    case turnRight // = 2
    case turnAround // = 3
    case wait // = 4
    case deliver // = 5
    case repeatTimesDo // = 6
    case repeatWhileDo // = 7
    case repeatUntilDo // = 8
    case ifDo // = 9
    case ifDoElse // = 10
    case call // = 11
    case UNRECOGNIZED(Int)

    init() {
      self = .moveForwards
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .moveForwards
      case 1: self = .turnLeft
      case 2: self = .turnRight
      case 3: self = .turnAround
      case 4: self = .wait
      case 5: self = .deliver
      case 6: self = .repeatTimesDo
      case 7: self = .repeatWhileDo
      case 8: self = .repeatUntilDo
      case 9: self = .ifDo
      case 10: self = .ifDoElse
      case 11: self = .call
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .moveForwards: return 0
      case .turnLeft: return 1
      case .turnRight: return 2
      case .turnAround: return 3
      case .wait: return 4
      case .deliver: return 5
      case .repeatTimesDo: return 6
      case .repeatWhileDo: return 7
      case .repeatUntilDo: return 8
      case .ifDo: return 9
      case .ifDoElse: return 10
      case .call: return 11
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Condition: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case not // = 0
    case atDestination // = 1
    case trafficLightRed // = 2
    case trafficLightGreen // = 3
    case roadExistsForward // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .not
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .not
      case 1: self = .atDestination
      case 2: self = .trafficLightRed
      case 3: self = .trafficLightGreen
      case 4: self = .roadExistsForward
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .not: return 0
      case .atDestination: return 1
      case .trafficLightRed: return 2
      case .trafficLightGreen: return 3
      case .roadExistsForward: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct RepeatTimesDo: SwiftProtobuf.Message {
    static let protoMessageName: String = Instruction.protoMessageName + ".RepeatTimesDo"

    var times: Int32 = 0

    var instructions: [Instruction] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self.times)
        case 2: try decoder.decodeRepeatedMessageField(value: &self.instructions)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.times != 0 {
        try visitor.visitSingularInt32Field(value: self.times, fieldNumber: 1)
      }
      if !self.instructions.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.instructions, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct RepeatConditionDo: SwiftProtobuf.Message {
    static let protoMessageName: String = Instruction.protoMessageName + ".RepeatConditionDo"

    var condition: [Instruction.Condition] = []

    var instructions: [Instruction] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedEnumField(value: &self.condition)
        case 2: try decoder.decodeRepeatedMessageField(value: &self.instructions)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.condition.isEmpty {
        try visitor.visitPackedEnumField(value: self.condition, fieldNumber: 1)
      }
      if !self.instructions.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.instructions, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct IfDo: SwiftProtobuf.Message {
    static let protoMessageName: String = Instruction.protoMessageName + ".IfDo"

    var condition: [Instruction.Condition] = []

    var doInstructions: [Instruction] = []

    var elseInstructions: [Instruction] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedEnumField(value: &self.condition)
        case 2: try decoder.decodeRepeatedMessageField(value: &self.doInstructions)
        case 3: try decoder.decodeRepeatedMessageField(value: &self.elseInstructions)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.condition.isEmpty {
        try visitor.visitPackedEnumField(value: self.condition, fieldNumber: 1)
      }
      if !self.doInstructions.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.doInstructions, fieldNumber: 2)
      }
      if !self.elseInstructions.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.elseInstructions, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Call: SwiftProtobuf.Message {
    static let protoMessageName: String = Instruction.protoMessageName + ".Call"

    var methodName: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.methodName)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.methodName.isEmpty {
        try visitor.visitSingularStringField(value: self.methodName, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2:
          var v: Instruction.RepeatTimesDo?
          if let current = _storage._detail {
            try decoder.handleConflictingOneOf()
            if case .repeatTimesDo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._detail = .repeatTimesDo(v)}
        case 3:
          var v: Instruction.RepeatConditionDo?
          if let current = _storage._detail {
            try decoder.handleConflictingOneOf()
            if case .repeatConditionDo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._detail = .repeatConditionDo(v)}
        case 4:
          var v: Instruction.IfDo?
          if let current = _storage._detail {
            try decoder.handleConflictingOneOf()
            if case .ifDo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._detail = .ifDo(v)}
        case 5:
          var v: Instruction.Call?
          if let current = _storage._detail {
            try decoder.handleConflictingOneOf()
            if case .call(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._detail = .call(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .moveForwards {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      switch _storage._detail {
      case .repeatTimesDo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .repeatConditionDo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .ifDo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .call(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Code: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "methods"),
  ]

  func _protobuf_generated_isEqualTo(other: Code) -> Bool {
    if self.methods != other.methods {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Method: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "instructions"),
  ]

  func _protobuf_generated_isEqualTo(other: Method) -> Bool {
    if self.name != other.name {return false}
    if self.instructions != other.instructions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Instruction: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "repeatTimesDo"),
    3: .same(proto: "repeatConditionDo"),
    4: .same(proto: "ifDo"),
    5: .same(proto: "call"),
  ]

  fileprivate class _StorageClass {
    var _type: Instruction.TypeEnum = .moveForwards
    var _detail: Instruction.OneOf_Detail?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _detail = source._detail
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Instruction) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._type != other_storage._type {return false}
        if _storage._detail != other_storage._detail {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Instruction.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MOVE_FORWARDS"),
    1: .same(proto: "TURN_LEFT"),
    2: .same(proto: "TURN_RIGHT"),
    3: .same(proto: "TURN_AROUND"),
    4: .same(proto: "WAIT"),
    5: .same(proto: "DELIVER"),
    6: .same(proto: "REPEAT_TIMES_DO"),
    7: .same(proto: "REPEAT_WHILE_DO"),
    8: .same(proto: "REPEAT_UNTIL_DO"),
    9: .same(proto: "IF_DO"),
    10: .same(proto: "IF_DO_ELSE"),
    11: .same(proto: "CALL"),
  ]
}

extension Instruction.Condition: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NOT"),
    1: .same(proto: "AT_DESTINATION"),
    2: .same(proto: "TRAFFIC_LIGHT_RED"),
    3: .same(proto: "TRAFFIC_LIGHT_GREEN"),
    4: .same(proto: "ROAD_EXISTS_FORWARD"),
  ]
}

extension Instruction.RepeatTimesDo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "times"),
    2: .same(proto: "instructions"),
  ]

  func _protobuf_generated_isEqualTo(other: Instruction.RepeatTimesDo) -> Bool {
    if self.times != other.times {return false}
    if self.instructions != other.instructions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Instruction.RepeatConditionDo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "condition"),
    2: .same(proto: "instructions"),
  ]

  func _protobuf_generated_isEqualTo(other: Instruction.RepeatConditionDo) -> Bool {
    if self.condition != other.condition {return false}
    if self.instructions != other.instructions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Instruction.IfDo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "condition"),
    2: .same(proto: "doInstructions"),
    3: .same(proto: "elseInstructions"),
  ]

  func _protobuf_generated_isEqualTo(other: Instruction.IfDo) -> Bool {
    if self.condition != other.condition {return false}
    if self.doInstructions != other.doInstructions {return false}
    if self.elseInstructions != other.elseInstructions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Instruction.Call: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "methodName"),
  ]

  func _protobuf_generated_isEqualTo(other: Instruction.Call) -> Bool {
    if self.methodName != other.methodName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
